{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/Home.js","components/ApiResults.js","App.js","registerServiceWorker.js","index.js"],"names":["NavMenu","props","className","href","Layout","children","Home","state","newUrl","deleteUrl","Urls","Validated","CurrentUrl","window","location","handleChange","bind","event","this","setState","target","name","value","url","a","fetch","componentDidMount","result","json","data","type","placeholder","ref","v","required","onClick","e","preventDefault","addData","style","textAlign","width","map","Url","key","path","to","pathname","deleteData","Component","ApiResults","Results","loadPage","object","i","App","exact","component","displayName","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5c291d8d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport function NavMenu(props) {\r\n    return (\r\n        <div className=\"header pure-u-5-5\">\r\n              <div className=\"home-menu pure-menu pure-menu-horizontal pure-menu-fixed\">\r\n                  <ul className=\"pure-menu-list\">\r\n                      <li className=\"pure-menu-item\"><a href=\"/\" className=\"pure-menu-link\">Home</a></li>\r\n                  </ul>\r\n              </div>\r\n          </div>\r\n    );\r\n  }\r\n\r\n","import React, { Component } from 'react';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport function Layout(props) {\r\n\r\n    return (\r\n        <div>\r\n            <NavMenu />\r\n            <div className=\"body-container\">\r\n                <div className=\"container\">\r\n                    {props.children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newUrl: \"\",\r\n            deleteUrl: \"\",\r\n            Urls: [],\r\n            Validated: false,\r\n            CurrentUrl: window.location.href\r\n        };\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    async addData(url) {\r\n        await fetch('Webhook/CreatePath/' + url);\r\n        this.componentDidMount();\r\n    }\r\n    async deleteData(url) {\r\n\r\n        await fetch('Webhook/DeletePath/' + url);\r\n        this.componentDidMount();\r\n    }\r\n   async componentDidMount() {\r\n       const result = await fetch('Webhook/GetAllPaths');\r\n       const data = await result.json();\r\n       this.setState({ Urls: data });\r\n    }\r\n    render() {\r\n        const formSubmitUrl = (e) => {\r\n            e.preventDefault();\r\n            this.addData(this.state.newUrl.value);\r\n        };\r\n        const deleteUrl = (path) => {\r\n            this.deleteData(path);\r\n        };\r\n        return (\r\n            <div className=\"pure-u-5-5\">\r\n            <div className=\"pure-u-18-24 padding\">\r\n                <input type=\"text\" className=\"pure-input pure-u-2-5\" placeholder=\"New Url\" ref={(v) => this.state.newUrl = v} required=\"\" />\r\n\r\n                <button className=\"pure-button pure-button-primary pure-u-lg-2-24\" type=\"submit\" onClick={formSubmitUrl} >Create</button>\r\n                <table className='pure-table-horizontal stretch'>\r\n                    <thead >\r\n                        <tr>\r\n                            <th style={{ textAlign: 'center', width: '70%' }}>Url</th>\r\n                            <th style={{ textAlign: 'center', width: '30%' }}></th>\r\n                        </tr>\r\n                    </thead>\r\n                        <tbody style={{ textAlign: 'center' }}>\r\n                            {this.state.Urls.map(Url =>\r\n                                <tr key={Url.path}>\r\n                                    <td>{this.state.CurrentUrl + \"Webhook/\"+ Url.path}</td>\r\n                                <td><Link className=\"pure-button pure-button-primary\" to={{ pathname: './' + Url.path, state: { path: Url.path, data: [] } }} >View</Link><button className=\"button-error pure-button\" onClick={() => deleteUrl(Url.path)}>Delete</button></td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport class ApiResults extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: \"\",\r\n            Results: [],\r\n        };\r\n        if (props) {\r\n            if (props.location) {\r\n                if (props.location.state) {\r\n                    this.state.path = props.location.state.path;\r\n                    this.loadPage();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    async loadPage() {\r\n        const result = await fetch('Webhook/GetPath/' + this.state.path);\r\n        const data = await result.json();\r\n        this.setState({ Results: data });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"pure-u-5-5\">\r\n                <div className=\"pure-u-12-24 padding\">\r\n                    <ul>\r\n                    {this.state.Results.map((object, i) =>\r\n                        <li key={i}>\r\n                            {object.data}\r\n                        </li>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\nimport { ApiResults } from './components/ApiResults';\r\n\r\nimport './custom.css'\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render () {\r\n      return (\r\n          <div className=\"App\">\r\n              <Layout>\r\n                  <Route exact path='/' component={Home} />\r\n                  <Route exact path='/:path' component={ApiResults} />\r\n              </Layout>\r\n          </div>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'purecss/build/pure.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename={baseUrl}>\r\n        <App />\r\n    </BrowserRouter>,\r\n    rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}